2516. Take K of Each Character From Left and Right
          Approach:Sliding window
             Time complexity:O(n)
             Space complexity:O(1)

code(c++):
class Solution {
public:
    int takeCharacters(string s, int k) {
        vector<int>count(3,0);
        int n=s.length();
        for(char c:s){
            count[c-'a']++;
        }
        for(int i=0;i<3;i++){
            if(count[i]<k){
                return -1;
            }
        }
        vector<int>window(3,0);
        int l=0,maxwindow=0;
        for(int r=0;r<n;r++){
            window[s[r]-'a']++;
            while(l<=r&&(count[0]-window[0]<k||
                        count[1]-window[1]<k || count[2]-window[2]<k)){
                window[s[l]-'a']--;
                l++;
            }
            maxwindow=max(maxwindow,r-l+1);
        }
        return n-maxwindow;
    }
};

Main idea is: 
Minimum number of minutes needed = length of string-size of largest window (by using count)
          
