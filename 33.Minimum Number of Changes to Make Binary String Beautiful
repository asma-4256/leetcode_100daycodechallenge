2914.Minimum Number of Changes to Make Binary String Beautiful
                   Beutiful string is every substring of length will be both either 0's or 1's...

Time complexity :O(n)
Space complexity :O(1)

code(c++):
class Solution {
public:
    int minChanges(string s) {
        int count=0;
        for(int i=0;i<s.size();i=i+2){
            if(s[i]!=s[i+1]){
                count++;
            }
        }
        return count;    
    }
};
Example 1:

Input: s = "1001"
Output: 2
Explanation: We change s[1] to 1 and s[3] to 0 to get string "1100".
It can be seen that the string "1100" is beautiful because we can partition it into "11|00".
It can be proven that 2 is the minimum number of changes needed to make the string beautiful.

** The output is only count so we traverse through each substring & check if both are same or not if not then count will be ncremented & later sunstring move to next one....loop ends at last one.....
