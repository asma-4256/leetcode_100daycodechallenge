2406.Divide Intervals Into Minimum No of Groups

Time complexity:O(n log n)
Space complexity:O(n)
code (c++)

  class Solution {
public:
    int minGroups(vector<vector<int>>& intervals) {
        vector<int>start,end;
        for(const auto &interval:intervals){
            //int start=interval.first();
            //int end=interval.second();
            start.push_back(interval[0]);
            end.push_back(interval[1]);
        }
        sort(start.begin(),start.end());
        sort(end.begin(),end.end());
        int i=0,j=0,group=0,res=0;
        while(i<intervals.size()){
            if (i < start.size() && (j >= end.size() || start[i] <= end[j])){
                group++;
                res=max(group,res);
                i++;
            }
            else{
                group--;
                j++;
            }
            
            
        }
        return res;
        
    }
};

Example 1:

Input: intervals = [[5,10],[6,8],[1,5],[2,3],[1,10]]
Output: 3
Explanation: We can divide the intervals into the following groups:
- Group 1: [1, 5], [6, 8].
- Group 2: [2, 3], [5, 10].
- Group 3: [1, 10].
It can be proven that it is not possible to divide the intervals into fewer than 3 groups.
  
Example 2:

Input: intervals = [[1,3],[5,6],[8,10],[11,13]]
Output: 1
Explanation: None of the intervals overlap, so we can put all of them in one group.
 
