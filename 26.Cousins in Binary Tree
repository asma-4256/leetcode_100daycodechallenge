2641.Cousins in Binary Tree

Time complexity:O(n)
Space complexity:O(n)// because of queue

code(c++):
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* replaceValueInTree(TreeNode* root) {
        if(root==nullptr){
            return root;
        }
        queue<TreeNode*>q;
        q.push(root);
        int curr_levelsum=root->val;
        while(!q.empty()){
            int next_levelsum=0;
            int levelsize=q.size();
            for(int i=0;i<levelsize;i++){
                TreeNode* currNode=q.front();
                q.pop();
                // Update current node's value based on the current level sum
                currNode->val=curr_levelsum-currNode->val;
                int siblingsum=(currNode->left!=nullptr? currNode->left->val:0)+
                                (currNode->right!=nullptr? currNode->right->val:0);
                // Add the values of the children to the next level sum
                if(currNode->left!=nullptr){
                    next_levelsum+=currNode->left->val;
                    currNode->left->val=siblingsum;
                    q.push(currNode->left);
                }
                if(currNode->right!=nullptr){
                    next_levelsum+=currNode->right->val;
                    currNode->right->val=siblingsum;
                    q.push(currNode->right);
                }
            }
            // Update curr_levelsum to the sum of the next level
            curr_levelsum=next_levelsum;
        }
        return root;
    }
};


Lets take a queue & loading the nodes & work on it ...  
