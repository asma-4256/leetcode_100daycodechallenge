1942.The Number Of Smallest Unoccupied chairs

Time complexity: O(n^2)
code: c++

class Solution {
public:
    int smallestChair(vector<vector<int>>& times, int targetFriend) {
        vector<int> targetTime=times[targetFriend];    
        sort(times.begin(),times.end());
        int n=times.size();
        vector<int> chairTime(n);
        for(auto time:times){
            for(int i=0;i<n;i++){
                if(chairTime[i]<=time[0]){
                    chairTime[i]=time[1];
                    if(time==targetTime) return i;
                        break;
                    
                }
            }
           
        }
        return 0;    
    }
};
Example:
Input: times = [[1,4],[2,3],[4,6]], targetFriend = 1
Output: 1
Explanation: 
- Friend 0 arrives at time 1 and sits on chair 0.
- Friend 1 arrives at time 2 and sits on chair 1.
- Friend 1 leaves at time 3 and chair 1 becomes empty.
- Friend 0 leaves at time 4 and chair 0 becomes empty.
- Friend 2 arrives at time 4 and sits on chair 0.
Since friend 1 sat on chair 1, we return 1.
