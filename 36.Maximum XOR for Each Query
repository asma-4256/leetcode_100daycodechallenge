1829. Maximum XOR for Each Query
             Time complexity:O(n)    // O(N+N)=O(n)
             Space complexity:O(1)


code(c++):
class Solution {
public:
    vector<int> getMaximumXor(vector<int>& nums, int maximumBit) {
        int xorproduct=0;
        for(int i=0;i<nums.size();i++){
            xorproduct=xorproduct^nums[i];
        }
        vector<int>ans(nums.size());
        int mask=((1<<maximumBit)-1);
        for(int i=0;i<nums.size();i++){
            ans[i]=xorproduct^mask;
            xorproduct=xorproduct^nums[nums.size()-1-i];
        }
        return ans;
    }
};

Example 1:

Input: nums = [0,1,1,3], maximumBit = 2
Output: [0,3,2,3]
Explanation: The queries are answered as follows:
1st query: nums = [0,1,1,3], k = 0 since 0 XOR 1 XOR 1 XOR 3 XOR 0 = 3.
2nd query: nums = [0,1,1], k = 3 since 0 XOR 1 XOR 1 XOR 3 = 3.
3rd query: nums = [0,1], k = 2 since 0 XOR 1 XOR 2 = 3.
4th query: nums = [0], k = 3 since 0 XOR 3 = 3.

Algorithm
     Calculate our initial XOR  XOR product:
         xorProduct = 0
         For each num in nums: xorProduct = xorProduct XOR num
     Define our bitmask mask = (1 << maximumBit) - 1
     Initialize our answer array ans
     Answer each query and populate ans:
         From i = 0 to i = nums.length - 1:
             Set ans[i] to be xorProduct XOR mask, giving us a k that inverts the first maximumBit bits of product to maximize our value product XOR k
             Update xorProduct for the next query by removing the last element: xorProduct = xorProduct XOR nums[-i]
