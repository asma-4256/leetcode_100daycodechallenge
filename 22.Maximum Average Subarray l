643.Maximum Average Subarray 1
          Approach: Sliding window

Time complexity:o(n)
Spacde complexity:o(1)

code(c++)
class Solution {
public:
    double findMaxAverage(vector<int>& nums, int k) {
        int sum=0;
        for(int i=0;i<k;i++){
            sum=sum+nums[i];
        }
        int maxsum=sum;
        int start=0;
        for(int i=k;i<nums.size();i++){   //i=end
            sum-=nums[start];
            start++;
            sum+=nums[i];
            maxsum=max(maxsum,sum);
            
        }
        return (double)maxsum/k;
    }
};

Example 1:

Input: nums = [1,12,-5,-6,50,3], k = 4
Output: 12.75000
Explanation: Maximum average is (12 - 5 - 6 + 50) / 4 = 51 / 4 = 12.75

intial sum is sum of first 4 elements and later first value should be removed and next value should be added by using start & i(end) indexes...
